#VRML V2.0 utf8

WorldInfo {
	title "Trirankcylinder"
}

Background {
	skyColor [0.8 0.8 0.8]
}

Viewpoint {
	position 0 0 15
	description "Top"
}

Viewpoint {
	position 0 0 -15
	orientation 1 0 0 3.14159
	description "Bottom"
}


Shape {
	appearance Appearance {
		texture ImageTexture {
			url "Pieces.png"
		}
	}
	geometry DEF IFS IndexedFaceSet {
		coord DEF COORD Coordinate {}
		texCoord DEF TEX TextureCoordinate {}
		solid FALSE
	}
}

PROTO Line [
	exposedField SFColor color 0 0 0
	field MFVec2f curve [0 0, 0 1]
	field MFInt32 points [4]
	field SFInt32 map 0
]
{
	Group {
		children [
			DEF SENS TouchSensor {}
			Shape {
				appearance Appearance {
					material DEF MAT Material {
						diffuseColor IS color
						transparency 1
					}
				}
				geometry DEF EXTR Extrusion {
					crossSection [
						0 0.05,
						0.0353553 0.0353553,
						0.05 0,
						0.0353553 -0.0353553,
						0 -0.05,
						-0.0353553 -0.0353553,
						-0.05 0,
						-0.0353553 0.0353553,
						0 0.05
					]
				}
			}
		]
	}

	DEF SCRIPT Script {
		eventIn SFTime touch
		eventOut SFFloat trans
		eventOut MFVec3f set_spine

		field SFBool active FALSE
		field MFVec2f spine IS curve
		field MFInt32 anz IS points
		field SFInt32 part IS map

		url "javascript:
			function tri(n, k, m)
			{
				k2 = Math.PI * k / 4;
				sk = Math.sin(k2);
				ck = Math.cos(k2);

				r = new SFRotation(0, 0, 1, 2 * Math.PI * m / 3);
				v = new SFVec3f(n * Math.abs(sk) / Math.sqrt(3) / Math.PI + (4 - n) * 9 / 8, 4 * sk / Math.PI, 4 * ck / Math.PI);
				return r.multVec(v);
			}

			function pos(s)
			{
				switch(part)
				{
				case 0:
				case 1:
				case 2:
					return tri(s.x, s.y, part);
				case 3:
				case 4:
				case 5:
					return tri(4 - Math.abs(4 - s.x), -s.y * Math.cos(Math.PI * Math.floor(s.x / 4)), part + (Math.cos(Math.PI * Math.floor(s.x / 4)) + 1) / 2);
				default:
					return new SFVec3f(0, 0, 0);
				}
			}

			function initialize()
			{
				c = new MFVec3f;
				k = 0;
				for(i = 0; i < anz.length; i++)
				{
					for(j = 0; j < anz[i]; j++)
					{
						c[k] = pos(spine[i + 1].multiply(j).add(spine[i].multiply(anz[i] - j)).divide(anz[i]));
						k++
					}
				}
				c[k] = pos(spine[anz.length]);
				set_spine = c;
			}

			function touch(value, time)
			{
				trans = active;
				active = !active;
			}"
	}

	ROUTE SENS.touchTime TO SCRIPT.touch
	ROUTE SCRIPT.trans TO MAT.transparency
	ROUTE SCRIPT.set_spine TO EXTR.set_spine
}

Line {
	color 1 0 0
	map 0
	curve [0.5 -4, 0.5 4]
	points [32]
}

Line {
	color 1 0 0
	map 0
	curve [1.5 -4, 1.5 4]
	points [32]
}

Line {
	color 1 0 0
	map 0
	curve [2.5 -4, 2.5 4]
	points [32]
}

Line {
	color 1 0 0
	map 0
	curve [3.5 -4, 3.5 4]
	points [32]
}

Line {
	color 0 1 0
	map 1
	curve [0.5 -4, 0.5 4]
	points [32]
}

Line {
	color 0 1 0
	map 1
	curve [1.5 -4, 1.5 4]
	points [32]
}

Line {
	color 0 1 0
	map 1
	curve [2.5 -4, 2.5 4]
	points [32]
}

Line {
	color 0 1 0
	map 1
	curve [3.5 -4, 3.5 4]
	points [32]
}

Line {
	color 0 0 1
	map 2
	curve [0.5 -4, 0.5 4]
	points [32]
}

Line {
	color 0 0 1
	map 2
	curve [1.5 -4, 1.5 4]
	points [32]
}

Line {
	color 0 0 1
	map 2
	curve [2.5 -4, 2.5 4]
	points [32]
}

Line {
	color 0 0 1
	map 2
	curve [3.5 -4, 3.5 4]
	points [32]
}

Line {
	color 1 1 0
	map 3
	curve [0.5 0.5, 7.5 0.5]
	points [28]
}

Line {
	color 1 1 0
	map 3
	curve [0.5 1.5, 7.5 1.5]
	points [28]
}

Line {
	color 1 1 0
	map 3
	curve [0.5 2.5, 7.5 2.5]
	points [28]
}

Line {
	color 1 1 0
	map 3
	curve [0.5 3.5, 7.5 3.5]
	points [28]
}

Line {
	color 0 1 1
	map 4
	curve [0.5 0.5, 7.5 0.5]
	points [28]
}

Line {
	color 0 1 1
	map 4
	curve [0.5 1.5, 7.5 1.5]
	points [28]
}

Line {
	color 0 1 1
	map 4
	curve [0.5 2.5, 7.5 2.5]
	points [28]
}

Line {
	color 0 1 1
	map 4
	curve [0.5 3.5, 7.5 3.5]
	points [28]
}

Line {
	color 1 0 1
	map 5
	curve [0.5 0.5, 7.5 0.5]
	points [28]
}

Line {
	color 1 0 1
	map 5
	curve [0.5 1.5, 7.5 1.5]
	points [28]
}

Line {
	color 1 0 1
	map 5
	curve [0.5 2.5, 7.5 2.5]
	points [28]
}

Line {
	color 1 0 1
	map 5
	curve [0.5 3.5, 7.5 3.5]
	points [28]
}

Line {
	color 0 0 0
	map 3
	curve [0.5 -0.5, 3.5 -3.5]
	points [12]
}

Line {
	color 1 1 1
	map 3
	curve [0.5 -1.5, 7.5 -8.5]
	points [28]
}

Line {
	color 1 1 1
	map 3
	curve [0.5 -2.5, 7.5 -9.5]
	points [28]
}

Line {
	color 1 1 1
	map 3
	curve [0.5 -3.5, 7.5 -10.5]
	points [28]
}

Line {
	color 0 0 0
	map 3
	curve [0.5 -4.5, 3.5 -7.5]
	points [12]
}

Line {
	color 0 0 0
	map 3
	curve [0.5 0.5, 3.5 3.5]
	points [12]
}

Line {
	color 1 1 1
	map 3
	curve [0.5 -0.5, 7.5 6.5]
	points [28]
}

Line {
	color 1 1 1
	map 3
	curve [0.5 -1.5, 7.5 5.5]
	points [28]
}

Line {
	color 1 1 1
	map 3
	curve [0.5 -2.5, 7.5 4.5]
	points [28]
}

Line {
	color 0 0 0
	map 3
	curve [0.5 -3.5, 3.5 -0.5]
	points [12]
}

Line {
	color 0 0 0
	map 4
	curve [0.5 -0.5, 3.5 -3.5]
	points [12]
}

Line {
	color 1 1 1
	map 4
	curve [0.5 -1.5, 7.5 -8.5]
	points [28]
}

Line {
	color 1 1 1
	map 4
	curve [0.5 -2.5, 7.5 -9.5]
	points [28]
}

Line {
	color 1 1 1
	map 4
	curve [0.5 -3.5, 7.5 -10.5]
	points [28]
}

Line {
	color 0 0 0
	map 4
	curve [0.5 -4.5, 3.5 -7.5]
	points [12]
}

Line {
	color 0 0 0
	map 4
	curve [0.5 0.5, 3.5 3.5]
	points [12]
}

Line {
	color 1 1 1
	map 4
	curve [0.5 -0.5, 7.5 6.5]
	points [28]
}

Line {
	color 1 1 1
	map 4
	curve [0.5 -1.5, 7.5 5.5]
	points [28]
}

Line {
	color 1 1 1
	map 4
	curve [0.5 -2.5, 7.5 4.5]
	points [28]
}

Line {
	color 0 0 0
	map 4
	curve [0.5 -3.5, 3.5 -0.5]
	points [12]
}

Line {
	color 0 0 0
	map 5
	curve [0.5 -0.5, 3.5 -3.5]
	points [12]
}

Line {
	color 1 1 1
	map 5
	curve [0.5 -1.5, 7.5 -8.5]
	points [28]
}

Line {
	color 1 1 1
	map 5
	curve [0.5 -2.5, 7.5 -9.5]
	points [28]
}

Line {
	color 1 1 1
	map 5
	curve [0.5 -3.5, 7.5 -10.5]
	points [28]
}

Line {
	color 0 0 0
	map 5
	curve [0.5 -4.5, 3.5 -7.5]
	points [12]
}

Line {
	color 0 0 0
	map 5
	curve [0.5 0.5, 3.5 3.5]
	points [12]
}

Line {
	color 1 1 1
	map 5
	curve [0.5 -0.5, 7.5 6.5]
	points [28]
}

Line {
	color 1 1 1
	map 5
	curve [0.5 -1.5, 7.5 5.5]
	points [28]
}

Line {
	color 1 1 1
	map 5
	curve [0.5 -2.5, 7.5 4.5]
	points [28]
}

Line {
	color 0 0 0
	map 5
	curve [0.5 -3.5, 3.5 -0.5]
	points [12]
}

DEF START Script {
	eventOut MFVec3f coord
	eventOut MFVec2f texCoord
	eventOut MFInt32 coordIndex
	eventOut MFInt32 texCoordIndex

	field MFVec2f tex [6 5, 1 13, 2 5, 7 13, 8 5, 2 13, 1 5, 6 13,
		0 13, 0 5, 0 13, 0 5, 0 13, 0 5, 0 13, 0 5,
		9 7, 9 15, 9 7, 9 15, 9 7, 9 15, 9 7, 9 15,
		9 15, 9 7, 9 15, 9 7, 9 15, 9 7, 9 15, 9 7,
		6 4, 1 12, 2 4, 7 12, 8 4, 2 12, 1 4, 6 12,
		0 12, 0 4, 0 12, 0 4, 0 12, 0 4, 0 12, 0 4,
		9 7, 9 15, 9 7, 9 15, 9 7, 9 15, 9 7, 9 15,
		9 15, 9 7, 9 15, 9 7, 9 15, 9 7, 9 15, 9 7,
		6 3, 1 11, 2 3, 7 11, 8 3, 2 11, 1 3, 6 11,
		0 11, 0 3, 0 11, 0 3, 0 11, 0 3, 0 11, 0 3,
		9 7, 9 15, 9 7, 9 15, 9 7, 9 15, 9 7, 9 15,
		9 15, 9 7, 9 15, 9 7, 9 15, 9 7, 9 15, 9 7]

	url "javascript:
		function tri(n, k, m)
		{
			k2 = Math.PI * k / 4;
			sk = Math.sin(k2);
			ck = Math.cos(k2);

			r = new SFRotation(0, 0, 1, 2 * Math.PI * m / 3);
			v = new SFVec3f(n * Math.abs(sk) / Math.sqrt(3) / Math.PI + (4 - n) * 9 / 8, 4 * sk / Math.PI, 4 * ck / Math.PI);
			return r.multVec(v);
		}

		function texind(h, i, j)
		{
			t = tex[32 * h + 8 * Math.floor(i / 4) + Math.floor(j / 4)].multiply(4).add(new SFVec2f(j % 4, i % 4));
			return t.x + 41 * t.y;
		}

		function initialize()
		{
			tc = new MFVec2f;
			for(i = 0; i <= 64; i++)
			{
				for(j = 0; j <= 40; j++)
				{
					tc[41 * i + j] = new SFVec2f(j / 40, i / 64);
				}
			}
			texCoord = tc;

			c = new MFVec3f;
			for(m = 0; m <= 2; m++)
			{
				for(n = 0; n <= 16; n++)
				{
					for(k = -16; k <= 16; k++)
					{
						c[33 * (17 * m + n) + k + 16] = tri(n / 4, k / 4, m);
					}
				}
			}
			coord = c;

			ci = new MFInt32;
			tci = new MFInt32;
			for(m = 0; m <= 2; m++)
			{
				for(n = 0; n < 16; n++)
				{
					for(k = -16; k < 16; k++)
					{
						ci[5 * (32 * (16 * m + n) + k + 16)] = 33 * (17 * m + n) + k + 16;
						ci[5 * (32 * (16 * m + n) + k + 16) + 1] = 33 * (17 * m + n) + k + 17;
						ci[5 * (32 * (16 * m + n) + k + 16) + 2] = 33 * (17 * m + n) + k + 50;
						ci[5 * (32 * (16 * m + n) + k + 16) + 3] = 33 * (17 * m + n) + k + 49;
						ci[5 * (32 * (16 * m + n) + k + 16) + 4] = -1;
						tci[5 * (32 * (16 * m + n) + k + 16)] = texind(m, n, k + 16);
						tci[5 * (32 * (16 * m + n) + k + 16) + 1] = texind(m, n, k + 16) + 1;
						tci[5 * (32 * (16 * m + n) + k + 16) + 2] = texind(m, n, k + 16) + 42;
						tci[5 * (32 * (16 * m + n) + k + 16) + 3] = texind(m, n, k + 16) + 41;
						tci[5 * (32 * (16 * m + n) + k + 16) + 4] = -1;
					}
				}
			}
			coordIndex = ci;
			texCoordIndex = tci;
		}"
}

ROUTE START.coord TO COORD.point
ROUTE START.texCoord TO TEX.point
ROUTE START.coordIndex TO IFS.set_coordIndex
ROUTE START.texCoordIndex TO IFS.set_texCoordIndex
