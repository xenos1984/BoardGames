(define "NextCanNotMove"
	(not
		(can Move
			(do
				(forEach Piece Next)
				ifAfterwards:(not ("IsInCheck" "King" Next))
			)
		)
	)
)

(define "HasNeverMoved"
	(= (state at:#1) 1)
)

(define "PieceHasMoved"
	(set State at:#1 0)
)

(define "RememberPieceHasMoved"
	(then
		(if
			(= (state at:(last To)) 1)
			("PieceHasMoved" (last To))
		)
	)
)

(define "CaptureToPieceAndResetCounter"
	(apply
		if:(not (is Friend (who at:(to))))
		(if (is Enemy (who at:(to)))
			(remove
				(to)
				(then (set Counter))
			)
		)
	)
)

(define "SlideOnTrack"
	(move
		Slide
		#1
		(to
			if:(is Enemy (who at:(to)))
			"CaptureToPieceAndResetCounter"
		)
	)
)

(define "SlideOnTrackRemember"
	(move
		Slide
		#1
		(to
			if:(is Enemy (who at:(to)))
			"CaptureToPieceAndResetCounter"
		)
		"RememberPieceHasMoved"
	)
)

(define "StepByMath"
	(move
		(from)
		(to
			(+ (* 8 (+ (/ (from) 8) #2)) (% (+ (from) #1) 8))
			if:(and {(> (to) -1) (< (to) 64) (not (is Friend (who at:(to))))})
			"CaptureToPieceAndResetCounter"
		)
	)
)

(define "StepByMathRemember"
	(move
		(from)
		(to
			(+ (* 8 (+ (/ (from) 8) #1)) (% (+ (from) #2) 8))
			if:(and {(> (to) -1) (< (to) 64) (not (is Friend (who at:(to))))})
			"CaptureToPieceAndResetCounter"
		)
		"RememberPieceHasMoved"
	)
)

(define "PawnSingleStep"
	(move
		(from)
		(to
			(+ (- 24 (* 16 (mover))) (from))
			if:(and {(> (to) -1) (< (to) 64) (is Empty (to))})
		)
		(then
			(set Counter)
		)
	)
)

(define "PawnDoubleStep"
	(if (is In (from) (sites Start (piece (what at:(from)))))
		(move
			(from)
			(to
				(+ (- 48 (* 32 (mover))) (from))
				if:(and {(> (to) -1) (< (to) 64) (is Empty (/ (+ (from) (to)) 2)) (is Empty (to))})
			)
			(then
				(set Pending
					(/ (+ (last From) (last To)) 2)
					(then
						(set Counter)
					)
				)
			)
		)
	)
)

(define "PawnCapture"
	(move
		(from)
		(to
			(+ {(- 24 (* 16 (mover))) (* 8 (/ (from) 8)) (% (+ (from) #1) 8)})
			if:(and {(> (to) -1) (< (to) 64) (is Enemy (who at:(to)))})
			(apply
				(remove (to))
			)
		)
		(then
			(set Counter)
		)
	)
)

(define "PawnEnPassant"
	(move
		(from)
		(to
			(+ {(- 24 (* 16 (mover))) (* 8 (/ (from) 8)) (% (+ (from) #1) 8)})
			if:(and {(> (to) -1) (< (to) 64) (is Pending) (= (to) (value Pending))})
			(apply
				(remove (+ (- (* 16 (mover)) 24) (to)))
			)
		)
		(then
			(set Counter)
		)
	)
)

(define "KingSite"
	(- (* 56 (mover)) 52)
)

(define "KingSiteOffset"
	(+ (* 8 (/ ("KingSite") 8)) (% (+ ("KingSite") #1) 8))
)

(define "CastleMove"
	(if
		(and
			("HasNeverMoved" ("KingSiteOffset" #1))
			(can
				Move
				(slide
					(from ("KingSiteOffset" #1))
					#3
					(between
						(exact #4)
					)
				)
			)
		)
		(move
			Slide
			(from ("KingSite"))
			#2
			(between
				(exact 2)
				if:(and
					(is Empty (between))
					(not ("IsInCheck" "King" Mover at:(between)))
				)
			)
			(to
				if:True
				(apply
					("PieceHasMoved" (from))
				)
			)
			(then
				(slide
					(from ("KingSiteOffset" #1))
					#3
					(between
						(exact #4)
						if:True
					)
					(to
						if:True
						(apply
							("PieceHasMoved" (from))
						)
					)
				)
			)
		)
	)
)

(game "Cylinder chess (circular ranks)"
	(players 2)
	(equipment {
		(board
			(square 8)
			{
				(track "E" {0..7} loop:True)
				(track "E" {8..15} loop:True)
				(track "E" {16..23} loop:True)
				(track "E" {24..31} loop:True)
				(track "E" {32..39} loop:True)
				(track "E" {40..47} loop:True)
				(track "E" {48..55} loop:True)
				(track "E" {56..63} loop:True)
				(track "W" {7..0} loop:True)
				(track "W" {15..8} loop:True)
				(track "W" {23..16} loop:True)
				(track "W" {31..24} loop:True)
				(track "W" {39..32} loop:True)
				(track "W" {47..40} loop:True)
				(track "W" {55..48} loop:True)
				(track "W" {63..56} loop:True)
				(track "N" "0,N7")
				(track "N" "1,N7")
				(track "N" "2,N7")
				(track "N" "3,N7")
				(track "N" "4,N7")
				(track "N" "5,N7")
				(track "N" "6,N7")
				(track "N" "7,N7")
				(track "S" "56,S7")
				(track "S" "57,S7")
				(track "S" "58,S7")
				(track "S" "59,S7")
				(track "S" "60,S7")
				(track "S" "61,S7")
				(track "S" "62,S7")
				(track "S" "63,S7")
				(track "NE" {0 9 18 27 36 45 54 63})
				(track "NE" {1 10 19 28 37 46 55 56})
				(track "NE" {2 11 20 29 38 47 48 57})
				(track "NE" {3 12 21 30 39 40 49 58})
				(track "NE" {4 13 22 31 32 41 50 59})
				(track "NE" {5 14 23 24 33 42 51 60})
				(track "NE" {6 15 16 25 34 43 52 61})
				(track "NE" {7 8 17 26 35 44 53 62})
				(track "NW" {7 14 21 28 35 42 49 56})
				(track "NW" {6 13 20 27 34 41 48 63})
				(track "NW" {5 12 19 26 33 40 55 62})
				(track "NW" {4 11 18 25 32 47 54 61})
				(track "NW" {3 10 17 24 39 46 53 60})
				(track "NW" {2 9 16 31 38 45 52 59})
				(track "NW" {1 8 23 30 37 44 51 58})
				(track "NW" {0 15 22 29 36 43 50 57})
				(track "SW" {63 54 45 36 27 18 9 0})
				(track "SW" {56 55 46 37 28 19 10 1})
				(track "SW" {57 48 47 38 29 20 11 2})
				(track "SW" {58 49 40 39 30 21 12 3})
				(track "SW" {59 50 41 32 31 22 13 4})
				(track "SW" {60 51 42 33 24 23 14 5})
				(track "SW" {61 52 43 34 25 16 15 6})
				(track "SW" {62 53 44 35 26 17 8 7})
				(track "SE" {56 49 42 35 28 21 14 7})
				(track "SE" {63 48 41 34 27 20 13 6})
				(track "SE" {62 55 40 33 26 19 12 5})
				(track "SE" {61 54 47 32 25 18 11 4})
				(track "SE" {60 53 46 39 24 17 10 3})
				(track "SE" {59 52 45 38 31 16 9 2})
				(track "SE" {58 51 44 37 30 23 8 1})
				(track "SE" {57 50 43 36 29 22 15 0})
			}
		)
		(piece "King" Each
			(or {
				("StepByMathRemember" 1 0)
				("StepByMathRemember" -1 0)
				("StepByMathRemember" 0 1)
				("StepByMathRemember" 0 -1)
				("StepByMathRemember" 1 1)
				("StepByMathRemember" 1 -1)
				("StepByMathRemember" -1 1)
				("StepByMathRemember" -1 -1)
			})
		)
		(piece "Queen" Each
			(or {
				("SlideOnTrack" "N")
				("SlideOnTrack" "S")
				("SlideOnTrack" "E")
				("SlideOnTrack" "W")
				("SlideOnTrack" "NE")
				("SlideOnTrack" "SW")
				("SlideOnTrack" "SE")
				("SlideOnTrack" "NW")
			})
		)
		(piece "Bishop" Each
			(or {
				("SlideOnTrack" "NE")
				("SlideOnTrack" "SW")
				("SlideOnTrack" "SE")
				("SlideOnTrack" "NW")
			})
		)
		(piece "Rook" Each
			(or {
				("SlideOnTrackRemember" "N")
				("SlideOnTrackRemember" "S")
				("SlideOnTrackRemember" "E")
				("SlideOnTrackRemember" "W")
			})
		)
		(piece "Knight" Each
			(or {
				("StepByMath" 1 2)
				("StepByMath" 1 -2)
				("StepByMath" 7 2)
				("StepByMath" 7 -2)
				("StepByMath" 2 1)
				("StepByMath" 2 -1)
				("StepByMath" 6 1)
				("StepByMath" 6 -1)
			})
		)
		(piece "Pawn" Each
			(or
				{
					("PawnSingleStep")
					("PawnDoubleStep")
					("PawnCapture" 1)
					("PawnCapture" 7)
					("PawnEnPassant" 1)
					("PawnEnPassant" 7)
				}
				(then
					(if
						(or (> (last To) 55) (< (last To) 8))
						(moveAgain)
					)
				)
			)
		)
	})
	(rules
		 (start {
			(place "Pawn1" (sites Row 1))
			(place "Pawn2" (sites Row 6))
			(place "Rook1" {"A1" "H1"} state:1)
			(place "Knight1" {"B1" "G1"})
			(place "Bishop1" {"C1" "F1"})
			(place "Queen1" coord:"D1")
			(place "King1" coord:"E1" state:1)
			(place "Rook2" {"A8" "H8"} state:1)
			(place "Knight2" {"B8" "G8"})
			(place "Bishop2" {"C8" "F8"})
			(place "Queen2" coord:"D8")
			(place "King2" coord:"E8" state:1)
		})
		(play
			(if "SameTurn"
				(move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
				(do
					(or
						(forEach Piece)
						(if
							(and
								("HasNeverMoved" "KingSite")
								(not ("IsInCheck" "King" Mover))
							)
							(or {
								<Castling>
							})
						)
					)
					ifAfterwards:(not ("IsInCheck" "King" Mover))
				)
			)
		)
		(end {
			(if
				(and
					("IsInCheck" "King" Next)
					("NextCanNotMove")
				)
				(result Mover Win)
			)
			(if
				(or
					(no Moves Mover)
					(= (counter) 99)
				)
				(result Mover Draw)
			)
		})
	)
)

(option "Castling Rule" <Castling> args:{ <moves> } {
	(item "No castling"
		<>
		"Castling is not allowed."
	)
	(item "Standard castling"
		<
			("CastleMove" 3 "E" "W" 2)
			("CastleMove" 4 "W" "E" 3)
		>
		"Castling is allowed if the rook passes in front of the cylinder."
	)
	(item "Extended castling"
		<
			("CastleMove" 3 "E" "W" 2)
			("CastleMove" 4 "W" "E" 3)
			("CastleMove" 4 "E" "W" 3)
			("CastleMove" 3 "W" "E" 4)
		>
		"Castling is allowed if the rook passes on either side of the cylinder."
	)*
})

(metadata
	(info
		{
			(description "Cylinder chess (or cylindrical chess) is a chess variant. The game is played as if the board were a cylinder, with the left side of the board joined to the right side.")
			(rules "Pieces move as in standard chess, but the board is wrapped around a cylinder such that the ranks become circular.")
			(source "<a href=\"httpa://en.wikipedia.org/wiki/Cylinder_chess\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />Wikipedia</a>")
			(credit "Manuel Hohmann")
			(origin "Cylinder chess is one of six chess variants described by the Arabic historian Ali al-Masudi in 947.")
		}
	)
	(graphics {
		(show Check "King")
		(piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
		(board style Chess)
	})
	(ai "Chess_ai")
)
