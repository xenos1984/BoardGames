(define "NextCanNotMove"
	(not
		(can Move
			(do
				(forEach Piece Next)
				ifAfterwards:(not ("IsInCheck" "King" Next))
			)
		)
	)
)

(define "HasNeverMoved"
	(= (state at:#1) 1)
)

(define "PieceHasMoved"
	(set State at:#1 0)
)

(define "RememberPieceHasMoved"
	(then
		(if
			(= (state at:(last To)) 1)
			("PieceHasMoved" (last To))
		)
	)
)

(define "CaptureToPieceAndResetCounter"
	(apply
		if:(not (is Friend (who at:(to))))
		(if (is Enemy (who at:(to)))
			(remove
				(to)
				(then (set Counter))
			)
		)
	)
)

(define "SlideOnTrack"
	(move
		Slide
		#1
		(to
			if:(is Enemy (who at:(to)))
			"CaptureToPieceAndResetCounter"
		)
	)
)

(define "SlideOnTrackRemember"
	(move
		Slide
		#1
		(to
			if:(is Enemy (who at:(to)))
			"CaptureToPieceAndResetCounter"
		)
		"RememberPieceHasMoved"
	)
)

(define "StepByMath"
	(move
		(from)
		(to
			(% (+ {112 (* 8 (+ (/ (from) 8) #2)) (% (+ (from) #1) 8)}) 112)
			if:(not (is Friend (who at:(to))))
			"CaptureToPieceAndResetCounter"
		)
	)
)

(define "StepByMathRemember"
	(move
		(from)
		(to
			(% (+ {112 (* 8 (+ (/ (from) 8) #2)) (% (+ (from) #1) 8)}) 112)
			if:(not (is Friend (who at:(to))))
			"CaptureToPieceAndResetCounter"
		)
		"RememberPieceHasMoved"
	)
)

(define "PawnSingleStep"
	(move
		(from)
		(to
			(% (+ {112 (* (if (> (from) 60) -1 1) (- 24 (* 16 (mover)))) (from)}) 112)
			if:(is Empty (to))
		)
		(then
			(set Counter)
		)
	)
)

(define "PawnDoubleStep"
	(if (is In (from) (sites Start (piece (what at:(from)))))
		(move
			(from)
			(to
				(% (+ {112 (* (if (> (from) 60) -1 1) (- 48 (* 32 (mover)))) (from)}) 112)
				if:(and (is Empty (/ (+ (from) (to)) 2)) (is Empty (to)))
			)
			(then
				(set Pending
					(/ (+ (last From) (last To)) 2)
					(then
						(set Counter)
					)
				)
			)
		)
	)
)

(define "PawnCapture"
	(move
		(from)
		(to
			(% (+ {112 (* (if (> (from) 60) -1 1) (- 24 (* 16 (mover)))) (* 8 (/ (from) 8)) (% (+ (from) #1) 8)}) 112)
			if:(is Enemy (who at:(to)))
			(apply
				(remove (to))
			)
		)
		(then
			(set Counter)
		)
	)
)

(define "PawnEnPassant"
	(move
		(from)
		(to
			(% (+ {112 (* (if (> (from) 60) -1 1) (- 24 (* 16 (mover)))) (* 8 (/ (from) 8)) (% (+ (from) #1) 8)}) 112)
			if:(and (is Pending) (= (to) (value Pending)))
			(apply
				(remove (+ (* (if (> (from) 60) -1 1) (- (* 16 (mover)) 24)) (to)))
			)
		)
		(then
			(set Counter)
		)
	)
)

(define "KingSite"
	(- (* 56 (mover)) 52)
)

(define "KingSiteOffset"
	(+ (* 8 (/ ("KingSite") 8)) (% (+ ("KingSite") #1) 8))
)

(define "CastleMove"
	(if
		(and
			("HasNeverMoved" ("KingSiteOffset" #1))
			(can
				Move
				(slide
					(from ("KingSiteOffset" #1))
					#3
					(between
						(exact #4)
					)
				)
			)
		)
		(move
			Slide
			(from ("KingSite"))
			#2
			(between
				(exact 2)
				if:(and
					(is Empty (between))
					(not ("IsInCheck" "King" Mover at:(between)))
				)
			)
			(to
				if:True
				(apply
					("PieceHasMoved" (from))
				)
			)
			(then
				(slide
					(from ("KingSiteOffset" #1))
					#3
					(between
						(exact #4)
						if:True
					)
					(to
						if:True
						(apply
							("PieceHasMoved" (from))
						)
					)
				)
			)
		)
	)
)

(game "Torus chess (8 * 14 board)"
	(players 2)
	(equipment {
		(board
			(rectangle 14 8)
			{
				(track "E" {0..7} loop:True)
				(track "E" {8..15} loop:True)
				(track "E" {16..23} loop:True)
				(track "E" {24..31} loop:True)
				(track "E" {32..39} loop:True)
				(track "E" {40..47} loop:True)
				(track "E" {48..55} loop:True)
				(track "E" {56..63} loop:True)
				(track "E" {64..71} loop:True)
				(track "E" {72..79} loop:True)
				(track "E" {80..87} loop:True)
				(track "E" {88..95} loop:True)
				(track "E" {96..103} loop:True)
				(track "E" {104..111} loop:True)
				(track "W" {7..0} loop:True)
				(track "W" {15..8} loop:True)
				(track "W" {23..16} loop:True)
				(track "W" {31..24} loop:True)
				(track "W" {39..32} loop:True)
				(track "W" {47..40} loop:True)
				(track "W" {55..48} loop:True)
				(track "W" {63..56} loop:True)
				(track "W" {71..64} loop:True)
				(track "W" {79..72} loop:True)
				(track "W" {87..80} loop:True)
				(track "W" {95..88} loop:True)
				(track "W" {103..96} loop:True)
				(track "W" {111..104} loop:True)
				(track "N" "0,N13" loop:True)
				(track "N" "1,N13" loop:True)
				(track "N" "2,N13" loop:True)
				(track "N" "3,N13" loop:True)
				(track "N" "4,N13" loop:True)
				(track "N" "5,N13" loop:True)
				(track "N" "6,N13" loop:True)
				(track "N" "7,N13" loop:True)
				(track "S" "104,S13" loop:True)
				(track "S" "105,S13" loop:True)
				(track "S" "106,S13" loop:True)
				(track "S" "107,S13" loop:True)
				(track "S" "108,S13" loop:True)
				(track "S" "109,S13" loop:True)
				(track "S" "110,S13" loop:True)
				(track "S" "111,S13" loop:True)
				(track "NE" {0 9 18 27 36 45 54 63 64 73 82 91 100 109 6 15 16 25 34 43 52 61 70 79 80 89 98 107 4 13 22 31 32 41 50 59 68 77 86 95 96 105 2 11 20 29 38 47 48 57 66 75 84 93 102 111} loop:True)
				(track "NE" {1 10 19 28 37 46 55 56 65 74 83 92 101 110 7 8 17 26 35 44 53 62 71 72 81 90 99 108 5 14 23 24 33 42 51 60 69 78 87 88 97 106 3 12 21 30 39 40 49 58 67 76 85 94 103 104} loop:True)
				(track "NW" {7 14 21 28 35 42 49 56 71 78 85 92 99 106 1 8 23 30 37 44 51 58 65 72 87 94 101 108 3 10 17 24 39 46 53 60 67 74 81 88 103 110 5 12 19 26 33 40 55 62 69 76 83 90 97 104} loop:True)
				(track "NW" {6 13 20 27 34 41 48 63 70 77 84 91 98 105 0 15 22 29 36 43 50 57 64 79 86 93 100 107 2 9 16 31 38 45 52 59 66 73 80 95 102 109 4 11 18 25 32 47 54 61 68 75 82 89 96 111} loop:True)
				(track "SW" {111 102 93 84 75 66 57 48 47 38 29 20 11 2 105 96 95 86 77 68 59 50 41 32 31 22 13 4 107 98 89 80 79 70 61 52 43 34 25 16 15 6 109 100 91 82 73 64 63 54 45 36 27 18 9 0} loop:True)
				(track "SW" {104 103 94 85 76 67 58 49 40 39 30 21 12 3 106 97 88 87 78 69 60 51 42 33 24 23 14 5 108 99 90 81 72 71 62 53 44 35 26 17 8 7 110 101 92 83 74 65 56 55 46 37 28 19 10 1} loop:True)
				(track "SE" {104 97 90 83 76 69 62 55 40 33 26 19 12 5 110 103 88 81 74 67 60 53 46 39 24 17 10 3 108 101 94 87 72 65 58 51 44 37 30 23 8 1 106 99 92 85 78 71 56 49 42 35 28 21 14 7} loop:True)
				(track "SE" {111 96 89 82 75 68 61 54 47 32 25 18 11 4 109 102 95 80 73 66 59 52 45 38 31 16 9 2 107 100 93 86 79 64 57 50 43 36 29 22 15 0 105 98 91 84 77 70 63 48 41 34 27 20 13 6} loop:True)
			}
		)
		(piece "King" Each
			(or {
				("StepByMathRemember" 1 0)
				("StepByMathRemember" -1 0)
				("StepByMathRemember" 0 1)
				("StepByMathRemember" 0 -1)
				("StepByMathRemember" 1 1)
				("StepByMathRemember" 1 -1)
				("StepByMathRemember" -1 1)
				("StepByMathRemember" -1 -1)
			})
		)
		(piece "Queen" Each
			(or {
				("SlideOnTrack" "N")
				("SlideOnTrack" "S")
				("SlideOnTrack" "E")
				("SlideOnTrack" "W")
				("SlideOnTrack" "NE")
				("SlideOnTrack" "SW")
				("SlideOnTrack" "SE")
				("SlideOnTrack" "NW")
			})
		)
		(piece "Bishop" Each
			(or {
				("SlideOnTrack" "NE")
				("SlideOnTrack" "SW")
				("SlideOnTrack" "SE")
				("SlideOnTrack" "NW")
			})
		)
		(piece "Rook" Each
			(or {
				("SlideOnTrackRemember" "N")
				("SlideOnTrackRemember" "S")
				("SlideOnTrackRemember" "E")
				("SlideOnTrackRemember" "W")
			})
		)
		(piece "Knight" Each
			(or {
				("StepByMath" 1 2)
				("StepByMath" 1 -2)
				("StepByMath" 7 2)
				("StepByMath" 7 -2)
				("StepByMath" 2 1)
				("StepByMath" 2 -1)
				("StepByMath" 6 1)
				("StepByMath" 6 -1)
			})
		)
		(piece "Pawn" Each
			(or
				{
					("PawnSingleStep")
					("PawnDoubleStep")
					("PawnCapture" 1)
					("PawnCapture" 7)
					("PawnEnPassant" 1)
					("PawnEnPassant" 7)
				}
				(then
					(if
						(or (is In (last To) (sites Row 0)) (is In (last To) (sites Row 7)))
						(moveAgain)
					)
				)
			)
		)
	})
	(rules
		 (start {
			(place "Pawn1" (union (sites Row 1) (sites Row 13)))
			(place "Pawn2" (union (sites Row 6) (sites Row 8)))
			(place "Rook1" {"A1" "H1"} state:1)
			(place "Knight1" {"B1" "G1"})
			(place "Bishop1" {"C1" "F1"})
			(place "Queen1" coord:"D1")
			(place "King1" coord:"E1" state:1)
			(place "Rook2" {"A8" "H8"} state:1)
			(place "Knight2" {"B8" "G8"})
			(place "Bishop2" {"C8" "F8"})
			(place "Queen2" coord:"D8")
			(place "King2" coord:"E8" state:1)
		})
		(play
			(if "SameTurn"
				(move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
				(do
					(or
						(forEach Piece)
						(if
							(and
								("HasNeverMoved" "KingSite")
								(not ("IsInCheck" "King" Mover))
							)
							(or {
								<Castling>
							})
						)
					)
					ifAfterwards:(not ("IsInCheck" "King" Mover))
				)
			)
		)
		(end {
			(if
				(and
					("IsInCheck" "King" Next)
					("NextCanNotMove")
				)
				(result Mover Win)
			)
			(if
				(or
					(no Moves Mover)
					(= (counter) 99)
				)
				(result Mover Draw)
			)
		})
	)
)

(option "Castling Rule" <Castling> args:{ <moves> } {
	(item "No castling"
		<>
		"Castling is not allowed."
	)
	(item "Standard castling"
		<
			("CastleMove" 3 "E" "W" 2)
			("CastleMove" 4 "W" "E" 3)
		>
		"Castling is allowed if the rook passes in front of the torus."
	)
	(item "Extended castling"
		<
			("CastleMove" 3 "E" "W" 2)
			("CastleMove" 4 "W" "E" 3)
			("CastleMove" 4 "E" "W" 3)
			("CastleMove" 3 "W" "E" 4)
		>
		"Castling is allowed if the rook passes on either side of the torus."
	)*
})

(metadata
	(info
		{
			(description "Torus chess is a chess variant. The game is played as if the board were a torus, with the left side of the board joined to the right side and the top joined to the bottom. In this version the two ranks filled with pawns and the ranks between them are doubled to give 14 ranks in total.")
			(rules "Pieces move as in standard chess, but the board is wrapped around a torus such that the ranks and files become circular.")
			(credit "Manuel Hohmann")
			(origin "This is the author's own creation.")
		}
	)
	(graphics {
		(show Check "King")
		(piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
		(board style Chess)
	})
	(ai "Chess_ai")
)
